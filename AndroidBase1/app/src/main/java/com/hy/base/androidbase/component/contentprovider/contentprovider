ContentProvider
应用1：ContentResolver获取其他应用的数据
example: ContentProvider读取联系人

ContactsActivity.java

##1. 设置权限
* 静态申请
在AndroidManifest.xml中进行申请。
```
<manifest ...>
 <uses-permission android:name="android.permission.READ_CONTACTS" />
</manifest>
```
* 动态申请
  动态申请的流程为：发起申请和申请结果。

* 发起申请：
主要使用**requestPermissions(permission名字的数组,整型的自定义reques code)**方法
 注：
 1. 什么时候进行动态申请呢？**版本大于等于6.0**且**当前页面没有这个权限**。
 2. request code 为自定义数值，例子中我定义了一个常量int--PERMISSIONS_REQUEST_READ_CONTACTS，这个是为了在查看申请结果时判定用的。
 ```
 private void showContacts() {
        //检验是否版本大于6.0，当前页面是否有这个权限
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M &&checkSelfPermission(Manifest.permission.READ_CONTACTS) != PackageManager.PERMISSION_GRANTED) {
            //发起申请
            requestPermissions(new String[]{Manifest.permission.READ_CONTACTS}, PERMISSIONS_REQUEST_READ_CONTACTS);
        } else {
            //低版本直接运行，跳过动态申请。
            readContacts();
        }
    }
 ```

* 申请结果
重写**onRequsetPermissionResult**(int requestCode,String[] permissions,int[] grantResults)方法。
注：
 1. 在此返回的requestCode是发送申请中自定义的requestCode，permissions String数组也是发送申请中的，grantResults返回的有两种PackageManager.PERMISSION_**GRANTED**和PackageManager.PERMISSIO
N_**DENIED**
 ```
 @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions,
                                           int[] grantResults) {
        if (requestCode == PERMISSIONS_REQUEST_READ_CONTACTS) {
            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                // 申请权限通过
                showContacts();
            } else {
                Toast.makeText(this, "只有通过了权限申请才能查看", Toast.LENGTH_SHORT).show();
            }
        }
    }

##2 获取联系人

* 主要使用ContentResolver进行操作
使用游标来对ContentResolver获取的数据进行操作。
```
private void readContacts(){
        Cursor cursor=null;
        try{
            cursor=getContentResolver().query(
                    ContactsContract.CommonDataKinds.Phone.CONTENT_URI,null,null,null,null
            );
            while(cursor.moveToNext()){
                String displayName =cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));
                String number=cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
                contactsList.add(displayName+"\n"+number);
            }
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            if(cursor!=null){
                cursor.close();
            }
        }
    }
```

## 3 页面显示
* List->adapter->ListView
```
ListView contactsView;
ArrayAdapter<String> adapter;
List<String> contactsList =new ArrayList<>();
...
adapter=new ArrayAdapter<>(this,android.R.layout.simple_list_item_1,contactsList);
contactsView.setAdapter(adapter);
```

————————————————————————————————————

应用2：ContenttProvider提供给其他APP读数据接口
http://www.jianshu.com/p/ea8bc4aaf057(5. 实例说明)

DBHelper.java
MyProvider.java
MyProviderActivity.java



————————————————————————————————————

应用3：ContenttProvider与ContentObserver监听（观察者模式）
自动填充短信验证码（使用ContentObserver）
http://www.cnblogs.com/zjy954/p/5282114.html